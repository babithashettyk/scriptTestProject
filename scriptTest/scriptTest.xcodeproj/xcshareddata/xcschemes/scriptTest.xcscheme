<?xml version="1.0" encoding="UTF-8"?>
<Scheme
   LastUpgradeVersion = "1300"
   version = "1.7">
   <BuildAction
      parallelizeBuildables = "YES"
      buildImplicitDependencies = "YES">
      <PreActions>
         <ExecutionAction
            ActionType = "Xcode.IDEStandardExecutionActionsCore.ExecutionActionType.ShellScriptAction">
            <ActionContent
               title = "Run Script"
               scriptText = "cd $SRCROOT&#10;cd ..&#10;#list the submodule under main repository&#10;IFS=$&apos;\n&apos;&#10;submoduleList=($(git submodule | awk &apos;{ print $2 }&apos;))&#10;unset IFS&#10;&#10;#list the submodule repo path from .gitmodules file&#10;IFS=$&apos;\n&apos;&#10;submodulePathList=($(git config --file .gitmodules --get-regexp url | awk &apos;{print $2}&apos;))&#10;unset IFS&#10;&#10;#check if submodule is already checked out or no, if not checkout to the specified branch that you ant to keep track of&#10;if [ &quot;$(ls -A ${submoduleList[0]})&quot; ]; then&#10;    echo &quot;submodule is already checked out&quot;&#10;&#10;#check the current working branch of each of the submodule&#10;    for each in &quot;${!submoduleList[@]}&quot;&#10;    do&#10;        cd ./${submoduleList[$each]}&#10;        git checkout development&#10;        submoduleBranch=($(git symbolic-ref --short HEAD))&#10;        repoCurrentBranchRevision=($(git ls-remote ${submodulePathList[$each]} refs/heads/$submoduleBranch | awk &apos;{print $1}&apos;))&#10;        repoMainBranchRevision=($(git ls-remote ${submodulePathList[$each]} refs/heads/main | awk &apos;{print $1}&apos;))&#10;        &#10;        if [ &quot;$repoCurrentBranchRevision&quot; == &quot;$repoMainBranchRevision&quot; ]; then&#10;            echo &quot;The $submoduleBranch branch of ${submoduleList[$each]} repo is up to date with the main branch&quot;&#10;        else&#10;            echo &quot;The $submoduleBranch branch of ${submoduleList[$each]} repo is not up to date with the main branch&quot;&#10;            #trigger a mail to the admin about the mismatch in the commit revision&#10;        fi&#10;        &#10;        &#10;        submoduleCurrentBranchRevision=($(git rev-parse @))&#10;        if [ &quot;$repoCurrentBranchRevision&quot; == &quot;$submoduleCurrentBranchRevision&quot; ]; then&#10;            echo &quot;Your submodule is up to date&quot;&#10;        else&#10;            echo &quot;Your submodule is not up to  date&quot;&#10;            git pull&#10;        fi&#10;        cd ..&#10;    done&#10;else&#10;    echo &quot;submodule is not checked out&quot;&#10;     git submodule update --init --recursive&#10;     cd ./${submoduleList[$each]}&#10;     git checkout development&#10;     cd ..&#10;fi&#10;&#10;&#10;&#10;">
               <EnvironmentBuildable>
                  <BuildableReference
                     BuildableIdentifier = "primary"
                     BlueprintIdentifier = "79CA7F11273E1B6700FEDD54"
                     BuildableName = "scriptTest.app"
                     BlueprintName = "scriptTest"
                     ReferencedContainer = "container:scriptTest.xcodeproj">
                  </BuildableReference>
               </EnvironmentBuildable>
            </ActionContent>
         </ExecutionAction>
      </PreActions>
      <BuildActionEntries>
         <BuildActionEntry
            buildForTesting = "YES"
            buildForRunning = "YES"
            buildForProfiling = "YES"
            buildForArchiving = "YES"
            buildForAnalyzing = "YES">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "79CA7F11273E1B6700FEDD54"
               BuildableName = "scriptTest.app"
               BlueprintName = "scriptTest"
               ReferencedContainer = "container:scriptTest.xcodeproj">
            </BuildableReference>
         </BuildActionEntry>
      </BuildActionEntries>
   </BuildAction>
   <TestAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      shouldUseLaunchSchemeArgsEnv = "YES">
      <Testables>
      </Testables>
   </TestAction>
   <LaunchAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      launchStyle = "0"
      useCustomWorkingDirectory = "NO"
      ignoresPersistentStateOnLaunch = "NO"
      debugDocumentVersioning = "YES"
      debugServiceExtension = "internal"
      allowLocationSimulation = "YES">
      <BuildableProductRunnable
         runnableDebuggingMode = "0">
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "79CA7F11273E1B6700FEDD54"
            BuildableName = "scriptTest.app"
            BlueprintName = "scriptTest"
            ReferencedContainer = "container:scriptTest.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
   </LaunchAction>
   <ProfileAction
      buildConfiguration = "Release"
      shouldUseLaunchSchemeArgsEnv = "YES"
      savedToolIdentifier = ""
      useCustomWorkingDirectory = "NO"
      debugDocumentVersioning = "YES">
      <BuildableProductRunnable
         runnableDebuggingMode = "0">
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "79CA7F11273E1B6700FEDD54"
            BuildableName = "scriptTest.app"
            BlueprintName = "scriptTest"
            ReferencedContainer = "container:scriptTest.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
   </ProfileAction>
   <AnalyzeAction
      buildConfiguration = "Debug">
   </AnalyzeAction>
   <ArchiveAction
      buildConfiguration = "Release"
      revealArchiveInOrganizer = "YES">
   </ArchiveAction>
</Scheme>
